# Base packages
- name: Update and install packages
  package:
    name:
      - ca-certificates
      - apt-utils
      - apt-transport-https
      - gnupg2
    update_cache: yes
# Install Monitoring
# wget -qO- https://repos.insights.digitalocean.com/install.sh | less
- name: Add Digital Ocean monitoring agent apt key
  apt_key:
    url: https://repos.insights.digitalocean.com/sonar-agent.asc
    state: present
- name: Add Digital Ocean monitoring agent repo
  apt_repository:
    repo: deb https://repos.insights.digitalocean.com/apt/do-agent/ main main
    state: present
- name: Install Digital Ocean Monitoring Agent
  package:
    name: "{{ digital_ocean_monitoring_service }}"
    update_cache: yes
- name: Start and enable Digital Ocean Monitoring Agent
  systemd:
    name: "{{ digital_ocean_monitoring_service }}"
    state: started
    enabled: yes
# Install droplet console agent. This should already be installed on new instances
# wget -qO- https://repos-droplet.digitalocean.com/install.sh | less
- name: Add Digital Ocean console agent apt key
  apt_key:
    url: https://repos-droplet.digitalocean.com/gpg.key
    state: present
- name: Add Digital Ocean console agent repo
  apt_repository:
    repo: deb https://repos-droplet.digitalocean.com/apt/droplet-agent/ main main
    state: present
- name: Install Digital Ocean console agent
  package:
    name: "{{ digital_ocean_console_service }}"
    update_cache: yes
- name: Start and enable Digital Ocean console agent
  systemd:
    name: "{{ digital_ocean_console_service }}"
    state: started
    enabled: yes
# Setup unattended upgrades
- name: Install unattended-upgrades
  apt:
    pkg:
      - unattended-upgrades
    state: present
- name: Add 50unattended-upgrades
  copy:
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    group: root
    src: '../files/unattended-upgrades/50unattended-upgrades'
  notify: update-unattended-upgrades
- name: Add 20auto-upgrades
  copy:
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    owner: root
    group: root
    src: '../files/unattended-upgrades/20auto-upgrades'
  notify: update-unattended-upgrades
# Install fail2ban
- name: Install fail2ban
  package:
    name: "{{ fail2ban_service }}"
- name: Configure fail2ban
  copy:
    dest: "{{ fail2ban_config_dir }}/customisation.local"
    owner: root
    group: root
    src: '../files/fail2ban/customisation.local'
  notify: restart-fail2ban
- name: Start and enable fail2ban
  systemd:
    name: "{{ fail2ban_service }}"
    state: started
    enabled: yes
# Configure SSH
- name: Allow passwordless sudo
  copy:
    dest: /etc/sudoers.d/10-nopassword
    owner: root
    group: root
    mode: '0440'
    src: '../files/sudoers.d/10-nopassword'
- name: Disable password authentication
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    line: "PasswordAuthentication no"
    backup: yes
    state: present
  notify:
    - restart-ssh
# Consider ensuring that a non-root user can login before doing this. Though TBH this is so low level I don't
# think I care
- name: Disable root login
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: 'PermitRootLogin no'
    state: present
  notify:
    - restart-ssh
# I'm assuming that root will be disabled after the other tasks I care about here. This assumption may change in
# the future. Additionally if a server is provisioned with these tasks and I add another task it'll break. That
# means this should remain the smallest set of required tasks as possible and future playbooks should handle SSH
# config with a `become` from the non-root user. Maybe disabling password auth/root should even be moved and this
# should only include "Allow passwordless sudo".
