- name: Install dependencies
  package:
    name: "{{ minecraft_packages }}"
    update_cache: yes
    state: latest
- name: Add minecraft user
  user:
    name: minecraft
    create_home: yes
    shell: /bin/bash
# mscs installation
- name: Clone mscs
  become_user: minecraft # make sure the right user owns the folder
  git:
    repo: 'https://github.com/MinecraftServerControl/mscs.git'
    dest: "{{ minecraft_mscs_git_dir }}"
    version: main
  register: mscs_git
- name: Install mscs
  block:
  - name: Make sure {{ minecraft_install_dir }} exists
    file:
      path: "{{ minecraft_install_dir }}"
      state: directory
      mode: '0755'
      owner: minecraft
      group: minecraft
  - name: Install msctl
    become: true
    command:
      chdir: "{{ minecraft_mscs_git_dir }}"
      creates: "{{ minecraft_bin_dir }}/msctl"
      cmd: "install -m 0755 msctl {{ minecraft_bin_dir }}/msctl"
  - name: Install mscs
    become: true
    command:
      chdir: "{{ minecraft_mscs_git_dir }}"
      creates: "{{ minecraft_bin_dir }}/mscs"
      cmd: "install -m 0755 mscs {{ minecraft_bin_dir }}/mscs"
  - name: Install mscs.service
    become: true
    command:
      chdir: "{{ minecraft_mscs_git_dir }}"
      creates: "/etc/systemd/system/{{ minecraft_service }}.service"
      cmd: "install -m 0755 mscs.service /etc/systemd/system/{{ minecraft_service }}.service"
  - name: Install mscs.completion
    become: true
    command:
      chdir: "{{ minecraft_mscs_git_dir }}"
      creates: "/etc/bash_completion.d/mscs"
      cmd: "install -m 0644 mscs.completion /etc/bash_completion.d/mscs"
  when: mscs_git.before != mscs_git.after
# Setup crons and monitoring
- name: Add cron jobs
  template:
    src: "files/minecraft.cron.j2"
    dest: "/etc/cron.d/minecraft"
    owner: root
    group: root
    mode: 0644
- name: Add monitoring script
  template:
    src: "files/minecraft-up.sh.j2"
    dest: "{{ minecraft_bin_dir }}/minecraft-up.sh"
    owner: root
    group: root
    mode: 0755
# Create default world if it doesn't exist
- name: Check if {{ minecraft_default_world }} has been created
  stat:
    path: "{{ minecraft_install_dir }}/worlds/{{ minecraft_default_world }}/eula.txt"
  register: world_created
- name: Create and configure mscs
  block:
  - name: Create world {{ minecraft_default_world }}
    become_user: minecraft
    command:
      cmd: "mscs create {{ minecraft_default_world }}"
  - name: Accept EULA for {{ minecraft_default_world }}
    become_user: minecraft
    copy:
      dest: "{{ minecraft_install_dir }}/worlds/{{ minecraft_default_world }}/eula.txt"
      content: 'eula=true'
      mode: 0644
  when: not world_created.stat.exists
- name: Start and enable minecraft service
  systemd:
    name: "{{ minecraft_service }}"
    state: started
    enabled: yes

# We can edit config now! Setup PaperMC

# Global config is at {{ minecraft_install_dir }}/mscs.defaults
# Server config is at {{ minecraft_install_dir }}/worlds/{{ minecraft_default_world }}/mscs.properties
# Base minecraft server config is at {{ minecraft_install_dir }}/worlds/{{ minecraft_default_world }}/server.properties

- name: Add mscs.properties
  template:
    src: "files/mscs.properties.j2"
    dest: "{{ minecraft_install_dir }}/worlds/{{ minecraft_default_world }}/mscs.properties"
    owner: minecraft
    group: minecraft
    mode: 0664
  notify:
  - restart-minecraft
- name: Disable spawn protection
  lineinfile:
    regexp: '^spawn-protection='
    line: "spawn-protection=0"
    path: "{{ minecraft_install_dir }}/worlds/{{ minecraft_default_world }}/server.properties"
  notify:
  - restart-minecraft

# Configure ufw
- name: ufw - Allow minecraft 25565 TCP
  community.general.ufw:
    comment: Minecraft Game TCP port
    rule: allow
    port: 25565
    proto: tcp
- name: ufw - Allow minecraft maps 80 TCP
  community.general.ufw:
    comment: Minecraft Game TCP port
    rule: allow
    port: 80
    proto: tcp
- name: ufw - Allow minecraft maps 443 TCP
  community.general.ufw:
    comment: Minecraft Game TCP port
    rule: allow
    port: 443
    proto: tcp

# Install Overviewer from source since Ubuntu 20.04 packages are broken
# http://docs.overviewer.org/en/latest/building/#linux
- name: Clone overviewer
  become_user: minecraft # make sure the right user owns the folder
  git:
    repo: 'https://github.com/overviewer/Minecraft-Overviewer.git'
    dest: "{{ minecraft_overviewer_git_dir }}"
    version: master
  register: overviewer_git
- name: Install overviewer
  become_user: minecraft
  command:
    chdir: "{{ minecraft_overviewer_git_dir }}"
    cmd: "python3 setup.py build"
  # Only build on git updates
  when: overviewer_git.before != overviewer_git.after
- name: Add overviewer to PATH
  lineinfile:
    line: export PATH=$PATH:{{ minecraft_overviewer_git_dir }}
    path: /home/minecraft/.profile
- name: Add mscs-maps-location to mscs.defaults
  lineinfile:
    regexp: '^mscs-maps-location='
    line: "mscs-maps-location={{ minecraft_overviewer_maps_dir }}"
    path: "{{ minecraft_install_dir }}/mscs.defaults"
- name: Add mscs-maps-url to mscs.defaults
  lineinfile:
    regexp: '^mscs-maps-url='
    line: "mscs-maps-url=https://{{ minecraft_overviewer_maps_domain }}"
    path: "{{ minecraft_install_dir }}/mscs.defaults"
# Nginx setup
- name: Ensure server_tokens are off
  lineinfile:
    regexp: 'server_tokens'
    line: 'server_tokens off;'
    path: '/etc/nginx/nginx.conf'
  notify: restart-nginx
- name: Ensure {{ minecraft_overviewer_maps_dir }} exists
  file:
    path: "{{ minecraft_overviewer_maps_dir }}"
    state: directory
    mode: '0755'
    owner: minecraft
    group: minecraft
# Checking if a file contains a line: https://stackoverflow.com/a/54525651
- name: Check if Certbot has already run for {{ minecraft_overviewer_maps_domain }}
  lineinfile:
    path: "{{ minecraft_nginx_conf_dir }}/minecraft.conf"
    regexp: '# managed by Certbot'
    state: absent
  check_mode: yes
  changed_when: false
  register: certbot_run
- name: Add {{ minecraft_nginx_conf_dir }}/minecraft.conf
  template:
    src: "files/minecraft.nginx.conf.j2"
    dest: "{{ minecraft_nginx_conf_dir }}/minecraft.conf"
    owner: root
    group: root
    mode: 0644
  notify: reload-nginx
  # TODO: Fix this line
  when: certbot_run.found is not defined or not certbot_run.found
- name: Start and enable nginx service
  systemd:
    name: "{{ minecraft_nginx_service }}"
    state: started
    enabled: yes
# Setup certbot
- name: Install certbot
  community.general.snap:
    name: certbot
    classic: yes
- name: symlink certbot
  ansible.builtin.file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    owner: root
    group: root
    state: link
